apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: image-resample
  namespace: argo
spec:
  entrypoint: image-resample
  # volumeClaimTemplates:                 # define volume, same syntax as k8s Pod spec
  # - metadata:
      # name: workdir                     # name of volume claimannotations:  做为默认时可以不添加
    # spec:
      # accessModes: [ "ReadWriteMany" ]
      # resources:
        # requests:
          # storage: 4Gi
  arguments:
    parameters:
      - name: ceph_path
        value: /mnt/cephfs/rsi
      - name: input_raster
        value: /nfs/img
      - name: output_raster
        value: /nfs/output
      - name: res
        value: 1e-4
  templates:
    - name: image-resample
      inputs:
        parameters:
          - name: ceph_path
          - name: input_raster
          - name: output_raster
          - name: res
        artifacts: []
      dag:
        tasks:
          - name: batch-rule
            template: batch-rule
            arguments:
              parameters:
                - name: result_dir
                  value: '{{inputs.parameters.output_raster}}'
                - name: input_dir
                  value: '{{inputs.parameters.input_raster}}'
                - name: output_file
                  value: /tmp/image_parallel.json
                - name: suffix
                  value: .tif
            dependencies: []
          - name: resample
            template: resample
            arguments:
              parameters:
                - name: input_raster
                  value: '`cat /tmp/image_parallel.json | jq ''.[{{item}}].input_file''| sed ''s/\"//g''`'
                - name: output_raster
                  value: '`cat /tmp/image_parallel.json | jq ''.[{{item}}].output_file''| sed ''s/\"//g''`'
                - name: output_res
                  value: '{{inputs.parameters.res}}'
                - name: resampling_method
                  value: bilinear
              artifacts:
                - name: items
                  from: '{{tasks.batch-rule.outputs.artifacts.items}}'
            dependencies: [batch-rule]
            withSequence:
              count: '{{tasks.batch-rule.outputs.parameters.count}}'
    - name: batch-rule
      inputs:
        parameters:
          - name: result_dir
          - name: input_dir
          - name: output_file
          - name: suffix
      outputs:
        artifacts:
          - name: items
            path: /tmp/image_parallel.json
        parameters:
          - name: count
            valueFrom:
              path: /tmp/count
      container:
        image: 'mellemm/miniconda-centos7-rs:v0.1'
        command:
          - sh
          - '-c'
        imagePullPolicy: Always
        args:
          - >-
            python /opt/batch_rules/rsi_batch_rule.py
            --result_dir={{inputs.parameters.result_dir}}
            --input_dir={{inputs.parameters.input_dir}}
            --output_file={{inputs.parameters.output_file}}
            --suffix={{inputs.parameters.suffix}}
        resources:
          limits:
            memory: 1Gi
            cpu: 1
          requests:
            memory: 1Gi
            cpu: 1
        volumeMounts:
          - name: workdir
            mountPath: /nfs
    - name: resample
      inputs:
        parameters:
          - name: input_raster
          - name: output_raster
          - name: output_res
          - name: resampling_method
        artifacts:
          - name: items
            path: /tmp/image_parallel.json
      container:
        image: 'mellemm/miniconda-centos7-rs:v0.1'
        command:
          - sh
          - '-c'
        imagePullPolicy: Always
        args:
          - >-
            python /opt/resample_cmd.py
            --input_raster={{inputs.parameters.input_raster}}
            --output_raster={{inputs.parameters.output_raster}}
            --output_res={{inputs.parameters.output_res}}
            --resampling_method={{inputs.parameters.resampling_method}}
        resources:
          limits:
            memory: 1.5Gi
            cpu: 1
          requests:
            memory: 1.5Gi
            cpu: 1
        volumeMounts:
          - name: workdir
            mountPath: /nfs
  volumes:
    - name: workdir
      nfs:
        server: 172.25.138.162
        path: /nfs
  # volumes:
    # - name: workdir
      # persistentVolumeClaim:
        # claimName: test-claim  